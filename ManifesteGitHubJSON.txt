import json
import os
import logging
from datetime import datetime

# Configuration des logs
logging.basicConfig(filename='generate_manifest.log', level=logging.INFO, 
                    format='%(asctime)s - %(levelname)s - %(message)s')

def load_json(filepath):
    """
    Charge un fichier JSON et retourne son contenu.
    """
    try:
        with open(filepath, 'r') as file:
            data = json.load(file)
        logging.info(f"Chargement r√©ussi du fichier JSON : {filepath}")
        return data
    except Exception as e:
        logging.error(f"Erreur lors du chargement de {filepath} : {e}")
        return {}

def generate_module_section(data):
    """
    G√©n√®re la section des modules d'Ordos √† partir des donn√©es JSON.
    """
    section = ["## üì¶ Modules d'Ordos\n"]
    for module in data:
        section.append(f"### üîπ Module : {module['module']}")
        section.append(f"**Fonction** : {module['function']}")
        section.append(f"**Statut** : {module['status']}")
        section.append(f"**Description** : {module['description']}")
        section.append(f"**Fonctionnalit√©s cl√©s** : {', '.join(module['key_features'])}")
        section.append(f"**Logique** : {module['logic']}\n")
    return "\n".join(section)

def generate_results_section(data):
    """
    G√©n√®re la section des r√©sultats des outils √† partir des donn√©es JSON.
    """
    section = ["## üõ†Ô∏è Outils et r√©sultats\n"]
    for result in data:
        section.append(f"### üîπ Outil : {result['tool_name']}")
        section.append(f"**Temps de d√©veloppement** : {result['development_time']}")
        section.append(f"**Impact** : {result['impact']}")
        section.append(f"**R√©sultat final** : {result['outcome']}")
        section.append(f"**Contexte** : {result['context']}\n")
    return "\n".join(section)

def generate_audit_section(data):
    """
    G√©n√®re la section de contr√¥le des d√©rives √† partir des donn√©es JSON.
    """
    section = ["## üîç Contr√¥le des d√©rives\n"]
    for audit in data:
        section.append(f"### üîπ Module : {audit['module_name']}")
        section.append(f"**Type de d√©rive** : {audit['derivation_type']}")
        section.append(f"**Impact** : {audit['impact']}")
        section.append(f"**Heure de la d√©tection** : {audit['timestamp']}")
        section.append(f"**Action recommand√©e** : {audit['recommended_action']}\n")
    return "\n".join(section)

def export_manifest(content, output_format='txt'):
    """
    Exporte le manifeste au format .txt ou .md.
    """
    filename = f'Manifeste_{datetime.now().strftime("%Y%m%d_%H%M%S")}.{output_format}'
    try:
        with open(filename, 'w') as file:
            file.write(content)
        logging.info(f"Manifeste export√© au format {output_format} : {filename}")
    except Exception as e:
        logging.error(f"Erreur lors de l'export du manifeste : {e}")

def main():
    """
    Point d'entr√©e principal du script. Charge les fichiers, g√©n√®re les sections 
    et exporte le manifeste au format .txt et .md.
    """
    # Chemins des fichiers JSON
    ordos_path = os.path.join('data', 'Ordos.json')
    results_path = os.path.join('data', 'Results.json')
    audit_path = os.path.join('data', 'Audit_D√©rives.json')

    # Charger les fichiers JSON
    ordos_data = load_json(ordos_path)
    results_data = load_json(results_path)
    audit_data = load_json(audit_path)

    # G√©n√©rer les sections
    module_section = generate_module_section(ordos_data)
    results_section = generate_results_section(results_data)
    audit_section = generate_audit_section(audit_data)

    # Fusionner toutes les sections
    manifest_content = "\n".join([
        "# üìò Manifeste du cadre Ordos\n",
        module_section,
        results_section,
        audit_section
    ])

    # Exporter le manifeste en .txt et .md
    export_manifest(manifest_content, 'txt')
    export_manifest(manifest_content, 'md')

if __name__ == "__main__":
    main()
